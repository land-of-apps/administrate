#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'

ENV['APPMAP_INITIALIZE'] = 'false'

require 'appmap'
require 'appmap/version'

# AppMap CLI.
module AppMap
  class App
    extend GLI::App

    program_desc 'AppMap client'

    version AppMap::VERSION

    subcommand_option_handling :normal
    arguments :strict
    preserve_argv true

    class << self
      protected

      def default_appmap_file
        ENV['APPMAP_FILE'] || 'appmap.json'
      end

      def output_file_flag(c, default_value: nil)
        c.desc 'Name of the output file'
        c.long_desc <<~DESC
        Use a single dash '-' for stdout.
        DESC
        c.default_value default_value if default_value
        c.arg_name 'filename'
        c.flag %i[o output]
      end
    end

    desc 'AppMap configuration file name'
    default_value ENV['APPMAP_CONFIG'] || 'appmap.yml'
    arg_name 'filename'
    flag %i[c config]

    desc 'Record the execution of a program and generate an AppMap.'
    arg_name 'program'
    command :record do |c|
      output_file_flag(c, default_value: default_appmap_file)

      c.action do |_, _, args|
        # My subcommand name
        ARGV.shift

        # Consume the :output option, if provided
        if %w[-o --output].find { |arg_name| ARGV[0] == arg_name.to_s }
          ARGV.shift
          ARGV.shift
        end

        # Name of the program to execute. GLI will ensure that it's present.
        program = args.shift or help_now!("'program' argument is required")

        # Also pop the program name from ARGV, because the command will use raw ARGV
        # to load the extra arguments into this Ruby process.
        ARGV.shift

        require 'appmap/command/record'
        AppMap::Command::Record.new(@config, program).perform do |version, metadata, class_map, events|
          @output_file.write JSON.generate(version: version,
                                           metadata: metadata,
                                           classMap: class_map,
                                           events: events)
        end
      end
    end

    desc 'Calculate and print statistics of scenario files.'
    arg_name 'filename'
    command :stats do |c|
      output_file_flag(c, default_value: '-')

      c.desc 'Display format for the result (text | json)'
      c.default_value 'text'
      c.flag %i[f format]

      c.desc 'Maximum number of lines to display for each stat'
      c.flag %i[l limit]

      c.action do |_, options, args|
        require 'appmap/command/stats'

        limit = options[:limit].to_i if options[:limit]

        # Name of the file to analyze. GLI will ensure that it's present.
        filenames = args
        help_now!("'filename' argument is required") if filenames.empty?

        require 'appmap/algorithm/stats'
        result = filenames.inject(::AppMap::Algorithm::Stats::Result.new([], [])) do |stats_result, filename|
          appmap = begin
            JSON.parse(File.read(filename))
          rescue JSON::ParserError
            STDERR.puts "#{filename} is not valid JSON : #{$!}"
            nil
          end
          stats_result.tap do
            if appmap
              limit = options[:limit].to_i if options[:limit]
              stats_for_file = AppMap::Command::Stats.new(appmap).perform(limit: limit)
              stats_result.merge!(stats_for_file)
            end
          end
        end

        result.sort!
        result.limit!(limit) if limit

        display = case options[:format]
        when 'json'
          JSON.pretty_generate(result.as_json)
        else
          result.as_text
        end
        @output_file.write display
      end
    end

    pre do |global, _, options, _|
      @config = interpret_config_option(global[:config])
      @output_file = interpret_output_file_option(options[:output])

      true
    end

    class << self
      protected

      def interpret_config_option(fname)
        AppMap.initialize fname
      end

      def interpret_output_file_option(file_name)
        Hash.new { |_, fname| -> { File.new(fname, 'w') } }.tap do |open_output_file|
          open_output_file[nil] = -> { nil }
          open_output_file['-'] = -> { $stdout }
        end[file_name].call
      end
    end
  end
end

exit AppMap::App.run(ARGV)
